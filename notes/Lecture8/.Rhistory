# read in data first
weights.data <- tibble(read.table("./Davis.txt"))
# read in data first
weights.data <- tibble(read.table("./Davis.txt"))
# read in data first
weights.data <- tibble(read.table("./Davis.txt"))
2 + 3
a <- 2 + 3
a
set.seed(7260)
#Let's take a look at the PDF (probability density function) first
x <- 0:2000 * 0.05 - 50
y <- dnorm(x, mean = 10, sd = sqrt(100))
# X spans over [-50, 50] and y store the pdf value for each element in x.
# The following command generates a line plot
plot(x, y, type = "l")
# search the R Documentation for this "plot" function in the lower right window.
# Let's draw some random variables from the distribution
normal.samples <- rnorm(length(x), 10, 10)  # avoid using sample as the variable name because it's already used for a built-in function.  The bad behavior of R (python shares this overriding problem too)
# Produce a histogram of the random samples
hist(normal.samples)
hist(normal.samples, probability = TRUE)
hist(normal.samples, probability = TRUE)
lines(x, y, col="red", lwd=4)
#you may want to try the function "curve" too.  Go to its help page to find the usage.
library(ggplot2)
library(tibble)
# first group data into a data frame (an upgraded one, i.e., tibble)
sampled.data <- tibble(x = x, y = y, normal.samples = normal.samples)
ggplot(data = sampled.data) +
geom_line(mapping = aes(x = x, y = y)) +
theme_bw()
ggplot(data = sampled.data) +
geom_histogram(mapping = aes(x = normal.samples)) +
theme_bw()
ggplot(data = sampled.data) +
geom_histogram(mapping = aes(x = normal.samples, y = ..density..)) +
theme_bw()
ggplot(data = sampled.data) +
geom_histogram(mapping = aes(x = normal.samples, y = ..density..)) +
geom_line(mapping = aes(x = x, y = y), col = "red", size = 2) +
theme_bw()
# read in data first
weights.data <- tibble(read.table("./Davis.txt"))
weights.data[12, "height"] <- 166
weights.data[12, "weight"] <- 57
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = 0.97722, intercept = 1.7776) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
theme_bw() +
ggsave("figure_5_1.pdf", width = 8, height = 6)
# read in data first
weights.data <- tibble(read.table("./Davis.txt"))
weights.data[12, "height"] <- 166
weights.data[12, "weight"] <- 57
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = 0.97722, intercept = 1.7776) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
theme_bw()
ggsave("figure_5_1.pdf", width = 8, height = 6)
# read in data first
weights.data <- read.table("./Davis.txt")
weights.data[12, "height"] <- 166
weights.data[12, "weight"] <- 57
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = 0.97722, intercept = 1.7776) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
theme_bw()
ggsave("figure_5_1.pdf", width = 8, height = 6)
View(weights.data)
# read about the documentation of lm() function
slr.mod <- lm(weight ~ reportedWeight, data = weights.data)
summary(slr.mod)
slr.mod$coefficients
# read about the documentation of lm() function
slr.mod <- lm(weight ~ reportedWeight, data = weights.data)
summary(slr.mod)
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = slr.mod$coefficients[2], intercept = slr.mod$coefficients[1]) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
title(main = "Include linear regression line from lm() function estimates")
# read about the documentation of lm() function
slr.mod <- lm(weight ~ reportedWeight, data = weights.data)
summary(slr.mod)
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = slr.mod$coefficients[2], intercept = slr.mod$coefficients[1]) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
title(main = "Include linear regression line from lm() function estimates") +
theme_bw()
# read about the documentation of lm() function
slr.mod <- lm(weight ~ reportedWeight, data = weights.data)
summary(slr.mod)
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = slr.mod$coefficients[2], intercept = slr.mod$coefficients[1]) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
theme_bw(title = "Include linear regression line from lm() function estimates")
# read about the documentation of lm() function
slr.mod <- lm(weight ~ reportedWeight, data = weights.data)
summary(slr.mod)
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = slr.mod$coefficients[2], intercept = slr.mod$coefficients[1]) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
theme_bw() +
theme(title = "Include linear regression line from lm() function estimates")
# read about the documentation of lm() function
slr.mod <- lm(weight ~ reportedWeight, data = weights.data)
summary(slr.mod)
ggplot(data = weights.data, mapping = aes(x = reportedWeight, y = weight)) +
geom_point(shape = 1) +
geom_abline(slope = 1.0, intercept = 0.0, linetype = 2) +
geom_abline(slope = slr.mod$coefficients[2], intercept = slr.mod$coefficients[1]) +
coord_cartesian(xlim = c(38, 80), ylim = c(35, 80)) +
labs(title = "Include linear regression line from lm() function estimates") +
theme_bw()
2 + 3
2 + 4
?set.seed
set.seed(7260)
#Let's take a look at the PDF (probability density function) first
x <- 0:2000 * 0.05 - 50
y <- dnorm(x, mean = 10, sd = sqrt(100))
# X spans over [-50, 50] and y store the pdf value for each element in x.
# The following command generates a line plot
plot(x, y, type = "l")
